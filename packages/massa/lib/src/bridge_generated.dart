// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.64.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

abstract class Massa {
  Future<int> sum({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSumConstMeta;

  Future<int> sub({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSubConstMeta;

  Future<Account> newStaticMethodAccount({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodAccountConstMeta;

  Future<Account> fromStringStaticMethodAccount(
      {required String privKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromStringStaticMethodAccountConstMeta;

  Future<String> signMethodAccount(
      {required Account that, required String data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignMethodAccountConstMeta;

  Future<bool> verifyMethodAccount(
      {required Account that,
      required String data,
      required String signatureString,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifyMethodAccountConstMeta;
}

class Account {
  final Massa bridge;
  final String privateKey;
  final String publicKey;
  final String address;
  final int thread;

  Account({
    required this.bridge,
    required this.privateKey,
    required this.publicKey,
    required this.address,
    required this.thread,
  });

  static Future<Account> newAccount({required Massa bridge, dynamic hint}) =>
      bridge.newStaticMethodAccount(hint: hint);

  static Future<Account> fromString(
          {required Massa bridge, required String privKey, dynamic hint}) =>
      bridge.fromStringStaticMethodAccount(privKey: privKey, hint: hint);

  Future<String> sign({required String data, dynamic hint}) =>
      bridge.signMethodAccount(
        that: this,
        data: data,
      );

  Future<bool> verify(
          {required String data,
          required String signatureString,
          dynamic hint}) =>
      bridge.verifyMethodAccount(
        that: this,
        data: data,
        signatureString: signatureString,
      );
}

class MassaImpl implements Massa {
  final MassaPlatform _platform;
  factory MassaImpl(ExternalLibrary dylib) =>
      MassaImpl.raw(MassaPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MassaImpl.wasm(FutureOr<WasmModule> module) =>
      MassaImpl(module as ExternalLibrary);
  MassaImpl.raw(this._platform);
  Future<int> sum({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sum(port_, arg0, arg1),
      parseSuccessData: _wire2api_i32,
      constMeta: kSumConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSumConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sum",
        argNames: ["a", "b"],
      );

  Future<int> sub({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sub(port_, arg0, arg1),
      parseSuccessData: _wire2api_i32,
      constMeta: kSubConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSubConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sub",
        argNames: ["a", "b"],
      );

  Future<Account> newStaticMethodAccount({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new__static_method__Account(port_),
      parseSuccessData: (d) => _wire2api_account(d),
      constMeta: kNewStaticMethodAccountConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodAccountConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__Account",
        argNames: [],
      );

  Future<Account> fromStringStaticMethodAccount(
      {required String privKey, dynamic hint}) {
    var arg0 = _platform.api2wire_String(privKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_from_string__static_method__Account(port_, arg0),
      parseSuccessData: (d) => _wire2api_account(d),
      constMeta: kFromStringStaticMethodAccountConstMeta,
      argValues: [privKey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFromStringStaticMethodAccountConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "from_string__static_method__Account",
        argNames: ["privKey"],
      );

  Future<String> signMethodAccount(
      {required Account that, required String data, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_account(that);
    var arg1 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sign__method__Account(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSignMethodAccountConstMeta,
      argValues: [that, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignMethodAccountConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign__method__Account",
        argNames: ["that", "data"],
      );

  Future<bool> verifyMethodAccount(
      {required Account that,
      required String data,
      required String signatureString,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_account(that);
    var arg1 = _platform.api2wire_String(data);
    var arg2 = _platform.api2wire_String(signatureString);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_verify__method__Account(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      constMeta: kVerifyMethodAccountConstMeta,
      argValues: [that, data, signatureString],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVerifyMethodAccountConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "verify__method__Account",
        argNames: ["that", "data", "signatureString"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Account _wire2api_account(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Account(
      bridge: this,
      privateKey: _wire2api_String(arr[0]),
      publicKey: _wire2api_String(arr[1]),
      address: _wire2api_String(arr[2]),
      thread: _wire2api_u8(arr[3]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
